{"version":3,"sources":["checkButton.jsx","ToDoList.jsx","NameEntry.jsx","AddTask.jsx","App.js","serviceWorker.js","index.js"],"names":["CheckButton","state","taskComplete","toggleCheck","setState","prevState","onClick","props","toggleTask","task","class","id","this","role","aria-label","React","Component","ToDoList","tasks","map","isComplete","key","className","deleteTask","NameEntry","name","headerName","done","error","handleChange","event","input","target","value","onSubmit","preventDefault","nameAdded","type","placeholder","onChange","AddTask","newTask","addTask","App","isNameAdded","taskToggled","previousState","newState","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.a80d5228.chunk.js","sourcesContent":["import React from \"react\"\n\nclass CheckButton extends React.Component {\n    state = {\n        taskComplete: false\n    }\n\n    toggleCheck = () => {\n        this.setState((prevState) => {\n            return {\n                taskComplete: !prevState.taskComplete\n            }\n        })\n    }\n\n    onClick = () => {\n        this.toggleCheck()\n        this.props.toggleTask(this.props.task)\n    }\n\n    render() {\n        return (\n            <button class=\"checkButton\" id={this.props.task} onClick={this.onClick}>{this.state.taskComplete ? <span role=\"img\" aria-label=\"tick\">😁</span> : <p>     </p>}</button>\n        )\n    }\n}\n\nexport default CheckButton","import React from 'react';\nimport CheckButton from \"./checkButton\"\n\nconst ToDoList = (props) => {\n    return (\n        <table>\n            {props.tasks.map(({ task, isComplete }) => {\n                return <tr><td class=\"textrow\"  key={task}><p className={isComplete === true ? \"complete\" : \"incomplete\"}>{task}</p></td>\n                    <td><CheckButton toggleTask={props.toggleTask} task={task} /></td>\n                    <td><button key={`${task}-delete`} class=\"delete\" id={`${task}`} onClick={props.deleteTask}>Del</button>\n                   </td></tr>\n            })}\n        </table>\n    )\n}\n\nexport default ToDoList;\n","import React from 'react';\n\nclass NameEntry extends React.Component {\n    state = {\n        name: '',\n        headerName: '',\n        done: false,\n        error: false\n    }\n\n    handleChange = (event) => {\n        const input = event.target.value;\n        this.setState(() => {\n            return {\n                name: input\n            }\n        })\n    }\n \n    render() {   \n        return (\n            <header className=\"App-header\">\n            <h1>{this.state.headerName === '' ? \"To-Do List\" : `${this.state.headerName}'s To-Do List`}</h1>\n            {!this.state.done && <form onSubmit = {(event) => {\n                event.preventDefault()\n                if(this.state.name === '') {\n                    this.setState({\n                        error: true\n                    })\n                } else {\n                    this.props.nameAdded();\n                    this.setState(() =>  {\n                        return { headerName: this.state.name,\n                        done: !this.state.done }\n                    })\n                    this.setState({\n                        name : \"\"\n                    })\n                }}\n            }\n            >\n                <input type=\"text\" placeholder=\"enter your name\" onChange={this.handleChange} value={this.state.name}></input>\n                <button>submit</button>\n                {this.state.error && <p class=\"error\">you must enter a name</p>}\n            </form>\n            }\n            {this.state.done && <p>scroll down</p>}\n            </header>\n        )\n    }\n}\n\nexport default NameEntry;","import React from 'react';\n\nclass AddTask extends React.Component {\n    state = {\n        newTask: \"\",\n        error: false\n    }\n\n    handleChange = (event) => {\n        const newTask = event.target.value\n        this.setState(() => {\n            return { newTask, error: false } // Object destructuring\n        })\n    }\n\n    render() {\n        return (\n            <div>\n            <form onSubmit={(event) => {\n                const task = this.state.newTask\n                event.preventDefault()\n                if(task === '') {\n                    this.setState({\n                        error: true\n                    })\n                } else {\n                    this.props.addTask({ task, isComplete: false })\n                    this.setState({\n                        newTask: \"\"\n                    })\n                }   \n            }}>\n                <input onChange={this.handleChange} type=\"text\" value={this.state.newTask} placeholder=\"add a new task\"></input>\n                <button>Add task</button>\n            </form>\n            {this.state.error && <p class=\"error\">you must enter a task name</p>}\n            </div>\n        )\n    }\n}\n\nexport default AddTask;","import React from 'react';\nimport ToDoList from './ToDoList'\nimport NameEntry from \"./NameEntry\"\nimport AddTask from \"./AddTask\"\nimport './App.css';\n\nclass App extends React.Component {\n\n  state = {\n    tasks: [],\n    isNameAdded: false\n  }\n\n  toggleTask = (taskToggled) => {\n    this.setState((prevState) => {\n      const currentState = [...prevState.tasks]\n      const newState = currentState.map(task => {\n        if(task.task === taskToggled) {\n          const newTask = {...task}\n          newTask.isComplete = !newTask.isComplete\n          return newTask\n        } else {\n          return {...task};\n        }\n      })\n      return {\n        tasks: newState\n      }\n    })\n  }\n\n  addTask = (task) => {\n    this.setState((previousState) => {\n      return { tasks: [...previousState.tasks, task] }\n    })\n  }\n\n  nameAdded = () => {\n    this.setState((previousState) => {\n      const newState = {...previousState};\n      newState.isNameAdded = true;\n      return newState;\n    })\n  }\n\n  deleteTask = (event) => {\n    const id = event.target.id;\n    this.setState((previousState) => {\n      const currentTasks = [...previousState.tasks];\n      const newTasks = currentTasks.filter(task => {\n        return task.task !== id\n      })\n      return {tasks: newTasks};\n    })\n  }\n  render() {\n    // console.log(this.state);\n    return (\n      <div className=\"App\">\n        <NameEntry nameAdded = {this.nameAdded}/>\n        {this.state.isNameAdded && <div class = 'theBody'>\n        {this.state.isNameAdded && <AddTask addTask={this.addTask} />}\n        <ToDoList tasks={this.state.tasks} deleteTask = {this.deleteTask} toggleTask= {this.toggleTask}/>\n        </div>}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}